"""Provides classes for saving data generated by a process model."""

from abc import ABC, abstractmethod
import asyncio
from asyncio.tasks import Task
from collections import defaultdict, deque
import typing as _t

from plugboard.component import Component


class DataWriter(Component, ABC):
    """Abstract base class for writing data."""

    def __init__(
        self,
        *args: _t.Any,
        chunk_size: _t.Optional[int],
        **kwargs: _t.Any,
    ) -> None:
        """Instantiates the `DataWriter`.

        Args:
            chunk_size: The size of the data chunk to read from the DataFrame.
            *args: Additional positional arguments.
            **kwargs: Additional keyword arguments.
        """
        super().__init__(*args, **kwargs)
        self._buffer = defaultdict()
        self._chunk_size = chunk_size
        self._task: _t.Optional[Task] = None

    @abstractmethod
    async def _save(self, data: _t.Any) -> None:
        """Saves a chunk of data to the underlying source."""
        pass

    @abstractmethod
    async def _adapt(self, data: dict[str, deque]) -> _t.Any:
        """Adapts the data from `dict[str, deque]` into a format required for saving."""
        pass

    async def _save_chunk(self) -> None:
        """Write data from the buffer."""
        if self._task is not None:
            await self._task
        # Create task to save next chunk of data
        chunk = await self._adapt(self._buffer)
        self._task = asyncio.create_task(self._save(chunk))
        self._buffer = defaultdict(deque)

    async def init(self) -> None:
        """Initialises the `DataWriter`."""
        await self._fetch_chunk()

    async def step(self) -> None:
        """Takes data from inputs and saves to internal buffer."""
        for field in self.io.inputs:
            self._buffer[field].append(getattr(self, field))

        if len(self._buffer[self.io.inputs[0]]) >= self._chunk_size:
            await self._save_chunk()

    async def run(self) -> None:
        """Runs the `DataWriter`."""
        await super().run()
        # Flush any remaining data in the buffer after completion
        await self._save_chunk()
        await self._task
