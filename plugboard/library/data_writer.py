"""Provides classes for saving data generated by a process model."""

from abc import ABC, abstractmethod
import asyncio
from asyncio.tasks import Task
from collections import defaultdict, deque
import typing as _t

from plugboard.component import Component
from plugboard.component.io_controller import IOController, IODirection
from plugboard.schemas import ComponentArgsSpec


class DataWriterArgsSpec(ComponentArgsSpec):
    """Specification of the `DataWriter` constructor arguments.

    Attributes:
        field_names: The names of the fields to write to the data source.
        chunk_size: Optional; The size of the data chunk to read from the DataFrame.
    """

    field_names: list[str]
    chunk_size: _t.NotRequired[int | None]


class DataWriter(Component, ABC):
    """Abstract base class for writing data."""

    io = IOController()

    def __init__(
        self,
        field_names: list[str],
        chunk_size: _t.Optional[int] = None,
        **kwargs: _t.Unpack[ComponentArgsSpec],
    ) -> None:
        """Instantiates the `DataWriter`.

        Args:
            field_names: The names of the fields to write to the data source.
            chunk_size: The size of the data chunk to read from the DataFrame.
            **kwargs: Additional keyword arguments for [`Component`][plugboard.component.Component].
        """
        super().__init__(**kwargs)
        self._buffer: dict[str, deque] = defaultdict(deque)
        self._chunk_size = chunk_size
        self.io = IOController(inputs=field_names, outputs=None, namespace=self.name)
        self._task: _t.Optional[Task] = None

    @abstractmethod
    async def _save(self, data: _t.Any) -> None:
        """Saves a chunk of data to the underlying source."""
        pass

    @abstractmethod
    async def _convert(self, data: dict[str, deque]) -> _t.Any:
        """Converts the data from `dict[str, deque]` into a format required for saving."""
        pass

    def _bind_inputs(self) -> None:
        """Binds input fields to component fields and append to internal buffer."""
        for field in self.io.inputs:
            data = self.io.data[IODirection.INPUT][field]
            setattr(self, field, data)
            self._buffer[field].append(data)

    async def _save_chunk(self) -> None:
        """Write data from the buffer."""
        if self._task is not None:
            await self._task
        # Create task to save next chunk of data
        chunk = await self._convert(self._buffer)
        self._task = asyncio.create_task(self._save(chunk))
        self._buffer = defaultdict(deque)

    async def step(self) -> None:
        """Trigger save when buffer is at target size."""
        if self._chunk_size and len(self._buffer[self.io.inputs[0]]) >= self._chunk_size:
            await self._save_chunk()

    async def run(self) -> None:
        """Runs the `DataWriter`."""
        await super().run()
        # Flush any remaining data in the buffer after completion
        await self._save_chunk()
        await self._task  # type: ignore
